<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
		PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
		"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- 数据库驱动-->
	<classPathEntry	location="C:\Users\Administrator\.m2\repository\mysql\mysql-connector-java\5.1.6\mysql-connector-java-5.1.6.jar"/>
	<!-- 在MBG工作的时候，需要额外加载的依赖包
     location属性指明加载jar/zip包的全路径 -->
	<classPathEntry location="D:\mybatis-generator\mybatis-generator\shfc-common-1.0-SNAPSHOT.jar"/>
	<context id="mysql"	targetRuntime="MyBatis3" defaultModelType="flat">

		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8"/>
		<!-- 格式化java代码 -->
		<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

		<!-- 插件主要用来为生成的Java模型类添加序列化接口 -->
		<!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin> -->
		<!-- 为生成的Java模型创建一个toString方法 -->
		<!--<plugin type="org.mybatis.generator.plugins.ToStringPlugin"></plugin>-->

		<!-- 顶级序列化-父类序列化过 当前类仍然序列化 -->
		<!-- <plugin type="com.lvbin.plugins.TopSerializablePlugin"></plugin>-->
		<!-- 批量插入插件 -->
		<!--<plugin type="com.lvbin.plugins.batch.BatchInsertPlugin"></plugin> -->
		<!-- 批量更新插件 -->
		<!--<plugin type="com.lvbin.plugins.batch.BatchUpdatePlugin"></plugin> -->
		<!-- 存在即更新否则插入方法生成插件 -->
		<!--<plugin type="com.lvbin.plugins.upsert.MySqlUpsertPlugin"></plugin>-->
		<!-- @Repository注解 -->
		<plugin type="com.lvbin.plugins.PersistenceRepositoryAnnotationPlugin"></plugin>
		<!-- 分页查询全部方法生成插件 -->
		<plugin type="com.lvbin.plugins.page.MySqlPaginationPlugin">
			<property name="pageClassPath" value="com.shfc.mybatis.pagination.Page"/>
		</plugin>
		<!-- 初始化xml插入方法的值 -->
		<plugin type="com.lvbin.plugins.xml.InitializeXmlInsertMethodDefaultValuePlugin"></plugin>
		<!-- 初始化xml更新方法的值 -->
		<plugin type="com.lvbin.plugins.xml.InitializeXmlUpdateMethodDefaultValuePlugin"></plugin>
		<!-- 实体注释-映射文件注释 -->
		<plugin type="com.lvbin.plugins.comment.CommentPlugin">
			<property name="companyName" value="上海房产"/>
			<property name="copyright" value="Copyright (c) 2016 "/>
			<property name="author" value="lv bin"/>
			<property name="version" value="v1.0.0"/>
			<!-- 判断是否开启xml注释 -->
			<property name="openXmlComments" value="true"/>
		</plugin>
		<commentGenerator>
			<property name="suppressDate" value="true"/>
			<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="true"/>
		</commentGenerator>
		<!--数据库链接URL，用户名、密码 -->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://192.168.88.163:3306/tv_cloud" userId="java_user" password="0af95YJSeZ">
		</jdbcConnection>
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false"/>
		</javaTypeResolver>
		<!-- 生成模型的包名和位置-->
		<javaModelGenerator targetPackage="com.shfc.cloud.gateway.domain" targetProject="java">
			<property name="enableSubPackages" value="true"/>
			<!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
			<property name="trimStrings" value="true"/>
			<!-- 设置方法继承公共类 -->
			<property name="rootClass" value="com.shfc.common.httpbean.BaseBean"/>
		</javaModelGenerator>
		<!-- 生成映射文件的包名和位置-->
		<sqlMapGenerator targetPackage="mapper" targetProject="java">
			<property name="enableSubPackages" value="true"/>
		</sqlMapGenerator>
		<!-- 生成DAO的包名和位置-->
		<javaClientGenerator type="XMLMAPPER" targetPackage="com.shfc.cloud.gateway.dao" targetProject="java">
			<property name="enableSubPackages" value="true"/>
		</javaClientGenerator>
		<!-- 要生成哪些表-->
		<!-- domainObjectName="ServiceMonitorItem"-->
		<table tableName="sensitive_word" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
		</table>
		<!-- 生成全部的表 可以使用SQL通配符匹配多个表。-->
		<!--<table tableName="%" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"> -->
		<!-- 自动增长的列只有插入到数据库后才能得到ID AFTER -->
		<!--<generatedKey column="id" sqlStatement="Mysql" identity="true"/> -->
		<!-- 只有先获取序列之后，才能插入数据库 BEFORE -->
		<!-- <generatedKey column="id" sqlStatement="select SEQ_ID.nextval from dual"/> -->
		<!--</table>-->
	</context>
</generatorConfiguration>
